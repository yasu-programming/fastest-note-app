openapi: 3.0.3
info:
  title: Fast Note-Taking API
  description: High-performance note-taking application with hierarchical organization
  version: 1.0.0
  
servers:
  - url: http://localhost:3001/api/v1
    description: Development server
  - url: https://api.fastnotes.app/v1
    description: Production server

paths:
  # Authentication endpoints
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already exists

  /auth/login:
    post:
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  /auth/refresh:
    post:
      summary: Refresh access token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  # Folder endpoints
  /folders:
    get:
      summary: List user's folders
      security:
        - BearerAuth: []
      parameters:
        - name: parent_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by parent folder (null for root folders)
      responses:
        '200':
          description: Folders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  folders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
    
    post:
      summary: Create new folder
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderRequest'
      responses:
        '201':
          description: Folder created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '400':
          $ref: '#/components/responses/BadRequest'

  /folders/{id}:
    get:
      summary: Get folder details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Folder details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderWithContents'
        '404':
          description: Folder not found
    
    put:
      summary: Update folder
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolderRequest'
      responses:
        '200':
          description: Folder updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
    
    delete:
      summary: Delete folder
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Folder deleted successfully

  # Note endpoints
  /notes:
    get:
      summary: List notes
      security:
        - BearerAuth: []
      parameters:
        - name: folder_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by folder (null for root notes)
        - name: search
          in: query
          schema:
            type: string
          description: Search notes by content
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Notes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  notes:
                    type: array
                    items:
                      $ref: '#/components/schemas/NoteSummary'
                  total:
                    type: integer
                  has_more:
                    type: boolean
    
    post:
      summary: Create new note
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNoteRequest'
      responses:
        '201':
          description: Note created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'

  /notes/{id}:
    get:
      summary: Get note content
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Note content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '404':
          description: Note not found
    
    put:
      summary: Update note
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNoteRequest'
      responses:
        '200':
          description: Note updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '409':
          description: Version conflict - note was modified by another client
    
    delete:
      summary: Delete note
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Note deleted successfully

  /notes/{id}/move:
    post:
      summary: Move note to different folder
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                folder_id:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        '200':
          description: Note moved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer
          description: Access token expiry in seconds

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time

    Folder:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        parent_folder_id:
          type: string
          format: uuid
          nullable: true
        path:
          type: string
        level:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    FolderWithContents:
      allOf:
        - $ref: '#/components/schemas/Folder'
        - type: object
          properties:
            subfolders:
              type: array
              items:
                $ref: '#/components/schemas/Folder'
            notes:
              type: array
              items:
                $ref: '#/components/schemas/NoteSummary'

    CreateFolderRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        parent_folder_id:
          type: string
          format: uuid
          nullable: true

    UpdateFolderRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        parent_folder_id:
          type: string
          format: uuid
          nullable: true

    Note:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        folder_id:
          type: string
          format: uuid
          nullable: true
        version:
          type: integer
        content_size:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    NoteSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        folder_id:
          type: string
          format: uuid
          nullable: true
        content_size:
          type: integer
        updated_at:
          type: string
          format: date-time

    CreateNoteRequest:
      type: object
      required: [title]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
        content:
          type: string
          maxLength: 1048576  # 1MB limit
        folder_id:
          type: string
          format: uuid
          nullable: true

    UpdateNoteRequest:
      type: object
      required: [version]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
        content:
          type: string
          maxLength: 1048576  # 1MB limit
        version:
          type: integer
          description: Current version for optimistic locking

  responses:
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: array
                items:
                  type: string